#!/usr/bin/env node

/**
 * Resume Markdown Generator
 * 
 * This script generates the public/resume.md file from the JSON data source.
 * It ensures the markdown file is always in sync with the single source of truth.
 */

const fs = require('fs');
const path = require('path');

// Read the JSON data directly
const resumeDataPath = path.join(__dirname, '..', 'src', 'data', 'resume.json');
const resumeData = JSON.parse(fs.readFileSync(resumeDataPath, 'utf8'));

function generateHeaderMarkdown(header) {
  return `# ${header.name}\n\n${header.title}\n\n---\n\n**Location**: ${header.location}\n\n**Email**: [${header.email}](mailto:${header.email})\n\n**Mobile No.**: [${header.phone}](tel:${header.phone})\n\n[**LinkedIn Profile**](${header.linkedin})\n\n---`;
}

function generateExperienceMarkdown(experience) {
  let markdown = '## PROFESSIONAL EXPERIENCE\n\n';
  
  experience.forEach(job => {
    markdown += `### ${job.title}\n\n**${job.company}** ‚Äî ${job.location} | **${job.period}**\n\n`;
    
    job.achievements.forEach(achievement => {
      markdown += `- ${achievement}\n`;
    });
    
    markdown += `\n**Tech Stack**: ${job.techStack}\n\n---\n\n`;
  });
  
  return markdown.trim();
}

function generateSkillsMarkdown(skills) {
  let markdown = '## TECHNICAL SKILLS\n\n';
  
  Object.entries(skills).forEach(([category, items]) => {
    const categoryName = category.charAt(0).toUpperCase() + category.slice(1);
    markdown += `**${categoryName}**: ${items.join(', ')}\n\n`;
  });
  
  return markdown.trim();
}

function generateEducationMarkdown(education) {
  return `## EDUCATION\n\n**${education.degree}**\n\n${education.school} ‚Äî **${education.year}**`;
}

function generateLanguagesMarkdown(languages) {
  let markdown = '## LANGUAGES\n\n';
  languages.forEach(lang => {
    markdown += `- **${lang.name}** ‚Äì ${lang.level}\n`;
  });
  return markdown.trim();
}

function generateReferencesMarkdown(references, linkedin) {
  return `## REFERENCES\n\n${references} or on [LinkedIn](${linkedin})`;
}

function generateResumeMarkdown() {
  try {
    console.log('üîÑ Generating resume markdown from JSON data...');
    
    // Generate each section
    const header = generateHeaderMarkdown(resumeData.header);
    const experience = generateExperienceMarkdown(resumeData.experience);
    const skills = generateSkillsMarkdown(resumeData.skills);
    const education = generateEducationMarkdown(resumeData.education);
    const languages = generateLanguagesMarkdown(resumeData.languages);
    const references = generateReferencesMarkdown(resumeData.references, resumeData.header.linkedin);
    
    // Combine all sections
    const markdownContent = [header, experience, skills, education, languages, references].join('\n\n');
    
    // Add header comment
    const fullContent = `# This file is automatically generated from the content service
# Please update the content in src/data/resume.json instead
# Last generated: ${new Date().toISOString()}

${markdownContent}
`;
    
    // Write to public/resume.md
    const outputPath = path.join(__dirname, '..', 'public', 'resume.md');
    fs.writeFileSync(outputPath, fullContent, 'utf8');
    
    console.log('‚úÖ Resume markdown generated successfully!');
    console.log(`üìÅ Output: ${outputPath}`);
    
    // Validate the content structure
    const requiredSections = ['header', 'experience', 'skills', 'education', 'languages', 'references'];
    const missingSections = requiredSections.filter(section => !resumeData[section]);
    
    if (missingSections.length === 0) {
      console.log('‚úÖ Content validation passed');
    } else {
      console.warn('‚ö†Ô∏è  Content validation warnings:', missingSections);
    }
    
    return true;
  } catch (error) {
    console.error('‚ùå Error generating resume markdown:', error);
    return false;
  }
}

// Run the generator if this script is executed directly
if (require.main === module) {
  const success = generateResumeMarkdown();
  process.exit(success ? 0 : 1);
}

module.exports = generateResumeMarkdown;
